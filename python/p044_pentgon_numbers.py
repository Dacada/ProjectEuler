#!/usr/bin/python2
#-*- encoding:utf-8 -*-

"""
Pentagonal numbers are generated by the formula,
Pn=n(3n-1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their
difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum
and difference are pentagonal and D = |Pk - Pj| is minimised;
what is the value of D?
"""

from __future__ import division

import math
import euler

class AllPentagons(object):
    def __init__(self):
        self.holder = {}
        
    def pentagon(self,n):
        if n in self.holder:
            return self.holder[n]
        else:
            p = n*(3*n-1)/2
            self.holder[n] = p
            return p
        
    def is_pentagon(self,n):
        if n in self.holder:
            return True
        else:
            i = (1/6)*(1+math.sqrt(24*n+1))
            if i != int(i):
                return False
            else:
                self.holder[i] = n
                return True

def main():
    with euler.TimeWrapper():
        pent_calc = AllPentagons()
        
        MAX = 10000
        for j in range(1,MAX):
            for k in range(1,MAX):
                if k >= j:
                    break
                Pj = pent_calc.pentagon(j)
                Pk = pent_calc.pentagon(k)
                if pent_calc.is_pentagon(Pj + Pk) and\
                   pent_calc.is_pentagon(Pj - Pk):
                    #print "Pair found:\nPj={0},j={1}\nPk={2},k={3}\nD={4}".format(Pj,j,Pk,k,abs(Pk-Pj))
                    print int(abs(Pk-Pj))
                    return
                #elif Pj%10 == 0 and k==1:
                    #print "Checking Pj={0} (j={1})".format(Pj,j)

if __name__ == "__main__":
    main()
