#!/usr/bin/python2
#-*- encoding:utf-8 -*-

"""
The sequence of triangle numbers is generated by adding the
natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5
+ 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five
hundred divisors?

"""

import itertools
import euler

def number_divisors(n):
    total = 1
    
    factors = euler.factorize(n)
    factors_set = set(factors)

    for factor in factors_set:
        total *= factors.count(factor)+1

    return total

def main():
    with euler.TimeWrapper():

        result = 0
        for n in itertools.count():
            result += n
            if number_divisors(result) > 500:
                break

        print result
            

if __name__ == '__main__':
    main()
